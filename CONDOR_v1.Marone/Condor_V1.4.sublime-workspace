{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"if",
				"ifmain	if __name__ == '__main__'"
			]
		]
	},
	"buffers":
	[
		{
			"file": "BEMT.py",
			"settings":
			{
				"buffer_size": 26430,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Oct 24 13:49:13 2014\n\n@author: bengland3\n\"\"\"\n\n\"\"\" This code needs to be where the independent run file is for BEMT\"\"\"\nimport math\nimport numpy as np\n\ndef run_BEMT(Master):\n    debug = Master['BEMT Options']['BEMT_debug']\n    plot = Master['BEMT Options']['BEMT_plot']\n    animate =Master['BEMT Options']['BEMT_animate']\n    runTests = False\n    from time import clock\n    from configobj import ConfigObj\n    from validate import Validator\n    from BEMT import Blade, Rotor\n    import matplotlib.pyplot as plt\n    startTime = clock()\n    if runTests:\n        fails = []\n        for GW in [5000., 50000., 80000.]:\n            for V in [0., 300.]:\n                for horizM in [1., 10.]:\n                    for vertM in [1.,  10.]:\n                        for balance in [.5, 1.]:\n                            s = 'GW: %d     V: %d     horizM: %d     vertM: %d     balance: %f' % (GW, V, horizM, vertM, balance)\n                            print s\n                            v = ConfigObj(Master['Veh Mission Config']['Aircraft_Config'], configspec='Config/Configspec/vehicle.configspec')\n                            m = ConfigObj(Master['Veh Mission Config']['Mission_Config'], configspec='Config/Configspec/mission.configspec')\n                            vvdt = Validator()\n                            v.validate(vvdt)\n                            mvdt = Validator()\n                            m.validate(mvdt)\n                            rho = 0.0024\n                            f = 0.25 * GW**.5 * (1-v['Body']['DragTechImprovementFactor'])\n                            Vtip = v['Main Rotor']['TipSpeed'] # ft/s\n                            R = math.sqrt(GW / (math.pi * v['Main Rotor']['DiskLoading'] * v['Main Rotor']['NumRotors']))\n                            v['Main Rotor']['Radius'] = R\n                            v['Main Rotor']['DiskArea'] = math.pi * v['Main Rotor']['Radius']**2 * v['Main Rotor']['NumRotors']\n                            v['Main Rotor']['AverageChord'] = v['Main Rotor']['DiskArea']*v['Main Rotor']['Solidity'] / (v['Main Rotor']['Radius']*(1-v['Main Rotor']['RootCutout'])*v['Main Rotor']['NumBlades'])\n                            omega = Vtip / R # rad/s\n                            c81File='Config/C81/%s'%v['Main Rotor']['AirfoilFile']\n                            airfoildata = np.genfromtxt(c81File, skip_header=0, skip_footer=0) # read in the airfoil file\n                            averageChord=v['Main Rotor']['AverageChord']/v['Main Rotor']['Radius']\n                            blade = Blade(airfoildata,averageChord, Master,\\\n                                          skip_header=0, skip_footer=0, \\\n                                          taperRatio=v['Main Rotor']['TaperRatio'], tipTwist=v['Main Rotor']['TipTwist'], \\\n                                          rootCutout=v['Main Rotor']['RootCutout'], segments=v['Simulation']['numBladeElementSegments'], \\\n                                          dragDivergenceMachNumber=v['Main Rotor']['DragDivergenceMachNumber'])\n                            psiSegments=v['Simulation']['numBladeElementSegments']\n                            Vtip=v['Main Rotor']['TipSpeed']\n                            radius=v['Main Rotor']['Radius']\n                            numblades=v['Main Rotor']['NumBlades']\n                            rotor = Rotor(blade, psiSegments, Vtip, radius, numblades, Master)\n                            bladeArea = np.sum(blade.chord * rotor.radius * blade.dr * rotor.radius * rotor.numblades)\n                            diskArea = math.pi * rotor.radius**2\n                            solidity = bladeArea / diskArea\n                            Fhorizontal = 1./2 * rho * V**2 * f / horizM\n                            Fvertical = GW / vertM\n                            temp = rotor.trim(tolerancePct=v['Simulation']['TrimAccuracyPercentage'], V=V, rho=rho, speedOfSound=1026., Fx=Fhorizontal, Fz=Fvertical, maxSteps=v['Simulation']['MaxSteps'], advancingLiftBalance=balance) + Fhorizontal*V/550\n                            if math.isnan(temp) or temp<0:\n                                fails.append(s)\n                                print('FAIL')\n        print ''\n        print ''\n        print ''\n        print 'FAILURES:'\n        for fail in fails:\n            print fail\n    else:\n        v = ConfigObj(Master['Veh Mission Config']['Aircraft_Config'], configspec='Config/Configspec/vehicle.configspec')\n        m = ConfigObj(Master['Veh Mission Config']['Mission_Config'], configspec='Config/Configspec/mission.configspec')\n        vvdt = Validator()\n        v.validate(vvdt)\n        mvdt = Validator()\n        m.validate(mvdt)\n        GW = v['Weights']['BaselineGrossWeight'] # 17613#\n        V = 150.#270#\n        V *= 1.687\n        horizM = 1.\n        vertM = 1.\n        balance = .5\n        s = 'GW: %d     V: %d     horizM: %d     vertM: %d     balance: %f' % (GW, V, horizM, vertM, balance)\n        print s\n        rho = density(v['Engine Scaling']['CruiseAltitude'],v['Engine Scaling']['DeltaTemp'])\n        f = 0.25 * GW**.5 * (1-v['Body']['DragTechImprovementFactor'])\n        Vtip = v['Main Rotor']['TipSpeed'] # ft/s\n        R = math.sqrt(GW / (math.pi * v['Main Rotor']['DiskLoading'] * v['Main Rotor']['NumRotors']))\n        v['Main Rotor']['Radius'] = R\n        v['Main Rotor']['DiskArea'] = math.pi * v['Main Rotor']['Radius']**2 * v['Main Rotor']['NumRotors']\n        v['Main Rotor']['AverageChord'] = 1. # v['Main Rotor']['DiskArea']*v['Main Rotor']['Solidity'] / (v['Main Rotor']['Radius']*(1-v['Main Rotor']['RootCutout'])*v['Main Rotor']['NumBlades'])\n        omega = Vtip / R # rad/s\n        c81File='Config/C81/%s'%v['Main Rotor']['AirfoilFile']\n        airfoildata = np.genfromtxt(c81File, skip_header=0, skip_footer=0) # read in the airfoil file\n        averageChord=v['Main Rotor']['AverageChord']/v['Main Rotor']['Radius']\n        blade = Blade(airfoildata,averageChord, Master, skip_header=0, skip_footer=0,\\\n                      taperRatio=v['Main Rotor']['TaperRatio'],taperPosition=v['Main Rotor']['TaperPosition'], tipTwist=v['Main Rotor']['TipTwist'], \\\n                      rootCutout=v['Main Rotor']['RootCutout'], segments=v['Simulation']['numBladeElementSegments'], \\\n                      dragDivergenceMachNumber=v['Main Rotor']['DragDivergenceMachNumber'])\n        psiSegments=v['Simulation']['numBladeElementSegments']\n        Vtip=v['Main Rotor']['TipSpeed']\n        radius=v['Main Rotor']['Radius']\n        numblades=v['Main Rotor']['NumBlades']\n        rotor = Rotor(blade, psiSegments, Vtip, radius, numblades, Master)\n        bladeArea = np.sum(blade.chord * rotor.radius * blade.dr * rotor.radius * rotor.numblades)\n        diskArea = math.pi * rotor.radius**2\n        solidity = bladeArea / diskArea\n        Fhorizontal = 1./2 * rho * V**2 * f / horizM\n        Fvertical = GW / vertM\n        print 'Total Power (HP):  ',rotor.trim(tolerancePct=v['Simulation']['TrimAccuracyPercentage'], V=V, rho=rho, speedOfSound=1026., Fx=Fhorizontal, Fz=Fvertical, maxSteps=v['Simulation']['MaxSteps'], advancingLiftBalance=balance) + Fhorizontal*V/550\n\n\n        if plot:\n            plt.figure()\n            plt.subplot(241)\n            plt.plot(rotor.thrust_hist[5:])\n            plt.title('thrust')\n\n            plt.subplot(242)\n            plt.plot(rotor.pitch_hist[5:])\n            plt.title('pitch')\n\n            plt.subplot(243)\n            plt.plot(rotor.roll_hist[5:])\n            plt.title('roll')\n\n            plt.subplot(244)\n            plt.plot(rotor.miscA_hist[5:])\n            plt.title('rearLiftProportion')\n\n            plt.subplot(245)\n            plt.plot(rotor.theta_0_hist[5:])\n            plt.title('theta_0')\n\n            plt.subplot(246)\n            plt.plot(rotor.t1c_hist[5:])\n            plt.title('t1c')\n\n            plt.subplot(247)\n            plt.plot(rotor.t1s_hist[5:])\n            plt.title('t1s')\n\n            plt.subplot(248)\n            plt.plot(rotor.miscB_hist[5:])\n            plt.title('advancingLiftProportion')\n\n            plt.show()\n    stopTime = clock()\n\n    elapsed = stopTime - startTime\n    print('elapsed time: %d' % elapsed)\n\ndef pvar(locals_, vars_):\n    '''Prints the variables and there name'''\n    s = ['%s: %.3f' % (var, locals_[var]) for var in vars_]\n    print '     '.join(s)\n\ndef pdeg(locals_, vars_):\n    s = ['%s: %.2f' % (var*180./math.pi, locals_[var]) for var in vars_]\n    print '     '.join(s)\ndef density(altitude, DeltaTemp):\n    ISA = np.genfromtxt(\"Config\\Standard_Atmosphere\\ISA_Standard_Atmosphere.txt\", skip_header=2, skip_footer = 0)\n    alt = ISA[:,0]\n    temp = ISA[:,1]\n    Pres = ISA[:,3]\n    # ISA Standard Atmosphere Look up\n    pressure = np.interp(altitude, alt, Pres) * 144.0 # Conversion to lb/ft^2\n    temperature = np.interp(altitude,alt,temp) + 459.67 # Conversion to Rankin\n    temperature += DeltaTemp\n    R = 1716. # Gas costant Air imperial units (ft lb/slug Rankin)\n    rho = pressure/(R*temperature)\n    return rho #5e-13*altitude**2 - 7e-8*altitude + .0024 # ISA+15C?(slug/ft^3)",
			"file": "BEMT_Run.py",
			"file_size": 9196,
			"file_write_time": 130626347090000000,
			"settings":
			{
				"buffer_size": 9068,
				"line_ending": "Windows"
			}
		},
		{
			"file": "CONDOR.py",
			"settings":
			{
				"buffer_size": 1619,
				"line_ending": "Windows"
			}
		},
		{
			"file": "rf.py",
			"settings":
			{
				"buffer_size": 4527,
				"line_ending": "Unix"
			}
		},
		{
			"file": "rf_Run.py",
			"settings":
			{
				"buffer_size": 1297,
				"line_ending": "Windows"
			}
		},
		{
			"file": "vehicle.py",
			"settings":
			{
				"buffer_size": 39027,
				"line_ending": "Unix"
			}
		},
		{
			"file": "vehicle_Run.py",
			"settings":
			{
				"buffer_size": 10614,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 101.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Preferences: Browse Packages"
			]
		],
		"width": 549.0
	},
	"console":
	{
		"height": 162.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			"test2.py",
			"test.py",
			"test",
			"python test.py",
			"test.py"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/bengland3/Documents/GitHub/CONDOR/CONDOR_v1.4"
	],
	"file_history":
	[
		"/C/Users/bengland3/Documents/GitHub/CONDOR/CONDOR_v1.4/Config/Vehicles/vehicle_MD_530FF.cfg",
		"/C/Users/bengland3/Documents/GitHub/CONDOR/CONDOR_v1.4/Config/Configspec/vehicle.configspec",
		"/C/Users/Benjamin/Documents/GitHub/LogisticsSimulation_AHS2015/Order.py",
		"/C/Users/Benjamin/Documents/GitHub/git-tutorial/tutorial.py",
		"/C/Users/Benjamin/Dropbox/AHS Competition/Codes/Order.py",
		"/C/Users/Benjamin/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Benjamin/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Benjamin/Dropbox/AHS Competition/Codes/Vehicle.py",
		"/C/Users/Benjamin/Dropbox/AHS Competition/Codes/test2.py",
		"/C/Users/Benjamin/Dropbox/AHS Competition/Codes/test.py",
		"/C/Users/Benjamin/Dropbox/AHS Competition/Codes/Logic.py",
		"/C/Users/Benjamin/OneDrive for Business/CONDOR/CONDOR_v1.4/vehicle.py"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Blade",
			"cost",
			"scaleEngine"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "BEMT.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26430,
						"regions":
						{
						},
						"selection":
						[
							[
								876,
								891
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 1320.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "BEMT_Run.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9068,
						"regions":
						{
						},
						"selection":
						[
							[
								6103,
								6057
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1440.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "CONDOR.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1619,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "rf.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4527,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1091.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "rf_Run.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1297,
						"regions":
						{
						},
						"selection":
						[
							[
								306,
								306
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "vehicle.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39027,
						"regions":
						{
						},
						"selection":
						[
							[
								1115,
								1115
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 580.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "vehicle_Run.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10614,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1020.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 130.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "Condor_V1.4.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 625.0,
		"selected_items":
		[
			[
				"",
				"C:\\Users\\bengland3\\Documents\\GitHub\\LogisticsSimulation_AHS2015\\LogisticsSimulation_AHS2015.sublime-project"
			]
		],
		"width": 475.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 250.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
